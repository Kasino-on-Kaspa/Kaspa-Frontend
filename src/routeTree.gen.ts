/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as IndexImport } from "./routes/index";
import { Route as ReferralIndexImport } from "./routes/referral/index";
import { Route as LeaderboardIndexImport } from "./routes/leaderboard/index";
import { Route as ComingSoonIndexImport } from "./routes/coming-soon/index";
import { Route as GamesDicerollIndexImport } from "./routes/games/diceroll/index";
import { Route as GamesCoinflipIndexImport } from "./routes/games/coinflip/index";

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRoute,
} as any);

const ReferralIndexRoute = ReferralIndexImport.update({
  id: "/referral/",
  path: "/referral/",
  getParentRoute: () => rootRoute,
} as any);

const LeaderboardIndexRoute = LeaderboardIndexImport.update({
  id: "/leaderboard/",
  path: "/leaderboard/",
  getParentRoute: () => rootRoute,
} as any);

const ComingSoonIndexRoute = ComingSoonIndexImport.update({
  id: "/coming-soon/",
  path: "/coming-soon/",
  getParentRoute: () => rootRoute,
} as any);

const GamesDicerollIndexRoute = GamesDicerollIndexImport.update({
  id: "/games/diceroll/",
  path: "/games/diceroll/",
  getParentRoute: () => rootRoute,
} as any);

const GamesCoinflipIndexRoute = GamesCoinflipIndexImport.update({
  id: "/games/coinflip/",
  path: "/games/coinflip/",
  getParentRoute: () => rootRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/";
      path: "/";
      fullPath: "/";
      preLoaderRoute: typeof IndexImport;
      parentRoute: typeof rootRoute;
    };
    "/coming-soon/": {
      id: "/coming-soon/";
      path: "/coming-soon";
      fullPath: "/coming-soon";
      preLoaderRoute: typeof ComingSoonIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/leaderboard/": {
      id: "/leaderboard/";
      path: "/leaderboard";
      fullPath: "/leaderboard";
      preLoaderRoute: typeof LeaderboardIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/referral/": {
      id: "/referral/";
      path: "/referral";
      fullPath: "/referral";
      preLoaderRoute: typeof ReferralIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/games/coinflip/": {
      id: "/games/coinflip/";
      path: "/games/coinflip";
      fullPath: "/games/coinflip";
      preLoaderRoute: typeof GamesCoinflipIndexImport;
      parentRoute: typeof rootRoute;
    };
    "/games/diceroll/": {
      id: "/games/diceroll/";
      path: "/games/diceroll";
      fullPath: "/games/diceroll";
      preLoaderRoute: typeof GamesDicerollIndexImport;
      parentRoute: typeof rootRoute;
    };
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute;
  "/coming-soon": typeof ComingSoonIndexRoute;
  "/leaderboard": typeof LeaderboardIndexRoute;
  "/referral": typeof ReferralIndexRoute;
  "/games/coinflip": typeof GamesCoinflipIndexRoute;
  "/games/diceroll": typeof GamesDicerollIndexRoute;
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute;
  "/coming-soon": typeof ComingSoonIndexRoute;
  "/leaderboard": typeof LeaderboardIndexRoute;
  "/referral": typeof ReferralIndexRoute;
  "/games/coinflip": typeof GamesCoinflipIndexRoute;
  "/games/diceroll": typeof GamesDicerollIndexRoute;
}

export interface FileRoutesById {
  __root__: typeof rootRoute;
  "/": typeof IndexRoute;
  "/coming-soon/": typeof ComingSoonIndexRoute;
  "/leaderboard/": typeof LeaderboardIndexRoute;
  "/referral/": typeof ReferralIndexRoute;
  "/games/coinflip/": typeof GamesCoinflipIndexRoute;
  "/games/diceroll/": typeof GamesDicerollIndexRoute;
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | "/"
    | "/coming-soon"
    | "/leaderboard"
    | "/referral"
    | "/games/coinflip"
    | "/games/diceroll";
  fileRoutesByTo: FileRoutesByTo;
  to:
    | "/"
    | "/coming-soon"
    | "/leaderboard"
    | "/referral"
    | "/games/coinflip"
    | "/games/diceroll";
  id:
    | "__root__"
    | "/"
    | "/coming-soon/"
    | "/leaderboard/"
    | "/referral/"
    | "/games/coinflip/"
    | "/games/diceroll/";
  fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  ComingSoonIndexRoute: typeof ComingSoonIndexRoute;
  LeaderboardIndexRoute: typeof LeaderboardIndexRoute;
  ReferralIndexRoute: typeof ReferralIndexRoute;
  GamesCoinflipIndexRoute: typeof GamesCoinflipIndexRoute;
  GamesDicerollIndexRoute: typeof GamesDicerollIndexRoute;
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ComingSoonIndexRoute: ComingSoonIndexRoute,
  LeaderboardIndexRoute: LeaderboardIndexRoute,
  ReferralIndexRoute: ReferralIndexRoute,
  GamesCoinflipIndexRoute: GamesCoinflipIndexRoute,
  GamesDicerollIndexRoute: GamesDicerollIndexRoute,
};

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/coming-soon/",
        "/leaderboard/",
        "/referral/",
        "/games/coinflip/",
        "/games/diceroll/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/coming-soon/": {
      "filePath": "coming-soon/index.tsx"
    },
    "/leaderboard/": {
      "filePath": "leaderboard/index.tsx"
    },
    "/referral/": {
      "filePath": "referral/index.tsx"
    },
    "/games/coinflip/": {
      "filePath": "games/coinflip/index.tsx"
    },
    "/games/diceroll/": {
      "filePath": "games/diceroll/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
