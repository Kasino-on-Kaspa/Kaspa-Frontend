version: '3.8'

services:
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:80"
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - VITE_CMC_API_KEY=${VITE_CMC_API_KEY}
      - VITE_BACKEND_URL=/api
      - VITE_SOCKET_URL=/socket.io
      - VITE_API_TIMEOUT=30000
    depends_on:
      - backend
    networks:
      - kaspa-network

  backend:
    image: ghcr.io/kasino-on-kaspa/kaspa-kasino-express:latest
    platform: linux/amd64
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - CORS_ORIGIN=http://kasino.city
      - POSTGRES_HOST=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=kaspa_kasino
      - DATABASE_URL=postgresql://neondb_owner:npg_xs20KTlvFJDO@ep-white-king-a10probp-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require
      - PGSSLMODE=disable
      - JWT_SECRET=your_secret_key_here
      - JWT_EXPIRY=7d
      - JWT_REFRESH_EXPIRY=30d
      - KASPA_WSS_ENDPOINT=ws://65.21.153.228:18210
      - KASPA_GRPC_ENDPOINT=65.21.153.228:16210
      - NETWORK=kaspatest
      - MASTER_MNEMONIC=pool opinion key horse upset tortoise tube miss world junior emotion acoustic
      - MASTER_PRIVATE_KEY=aa54792f0dd2cfcce030111476a4d3b083b109c5507a27649831bdaa24b564cb
      - MASTER_ADDRESS=kaspatest:qrwmxrezslrtux5fwltsh2dua3kqt6eytyuql9ck5p7jtapsw3nwwxmmyevvj
    networks:
      - kaspa-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    command: >
      sh -c "
      set -e &&
      apt-get update && 
      apt-get install -y netcat-openbsd postgresql-client &&
      while ! nc -z db 5432; do sleep 1; done &&
      PGPASSWORD=postgres psql -h db -U postgres -c 'DROP DATABASE IF EXISTS kaspa_kasino;' &&
      PGPASSWORD=postgres psql -h db -U postgres -c 'CREATE DATABASE kaspa_kasino;' &&
      pnpm config set store-dir /app/.pnpm-store &&
      pnpm install &&
      pnpm drizzle-kit generate &&
      pnpm drizzle-kit push &&
      pnpm run dev
      "

  db:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=kaspa_kasino
      - POSTGRES_HOST_AUTH_METHOD=trust
      # Performance tuning
      - POSTGRES_MAX_CONNECTIONS=200
      - POSTGRES_SHARED_BUFFERS=512MB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=1536MB
      - POSTGRES_MAINTENANCE_WORK_MEM=128MB
      - POSTGRES_CHECKPOINT_COMPLETION_TARGET=0.9
      - POSTGRES_WAL_BUFFERS=16MB
      - POSTGRES_DEFAULT_STATISTICS_TARGET=100
      - POSTGRES_RANDOM_PAGE_COST=1.1
      - POSTGRES_EFFECTIVE_IO_CONCURRENCY=200
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MIN_WAL_SIZE=1GB
      - POSTGRES_MAX_WAL_SIZE=4GB
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../Kaspa-Backend/backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - kaspa-network

networks:
  kaspa-network:
    driver: bridge

volumes:
  postgres_data:
